{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = void 0;\nconst error_1 = require(\"../../error\");\nconst gssapi_1 = require(\"./gssapi\");\nconst providers_1 = require(\"./providers\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (hello.maxWireVersion >= 3) {\n      return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n  // Default for wireprotocol < 3\n  return providers_1.AuthMechanism.MONGODB_CR;\n}\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n  constructor(options) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param hello - A hello response from the server\n   */\n  resolveAuthMechanism(hello) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n    return this;\n  }\n  validate() {\n    if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === providers_1.AuthMechanism.MONGODB_CR || this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n      throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n    if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n      }\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n    const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n    if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n    }\n  }\n  static merge(creds, options) {\n    return new MongoCredentials({\n      username: options.username ?? creds?.username ?? '',\n      password: options.password ?? creds?.password ?? '',\n      mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\n    });\n  }\n}\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"mappings":"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","names":["getDefaultAuthMechanism","hello","Array","isArray","saslSupportedMechs","includes","providers_1","MONGODB_SCRAM_SHA256","MONGODB_SCRAM_SHA1","maxWireVersion","MONGODB_CR","MongoCredentials","constructor","options","username","password","source","db","mechanism","MONGODB_DEFAULT","mechanismProperties","match","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","Object","freeze","equals","other","resolveAuthMechanism","validate","MONGODB_GSSAPI","MONGODB_PLAIN","error_1","has","MONGODB_X509","Reflect","set","undefined","canonicalization","CANONICALIZE_HOST_NAME","values","gssapi_1","merge","creds","exports"],"sources":["/Users/alvarodgzz/Documents/calendarioAnae/app-calendario/node_modules/mongodb/src/cmap/auth/mongo_credentials.ts"],"sourcesContent":["// Resolves the default auth mechanism according to\nimport type { Document } from '../../bson';\nimport { MongoAPIError, MongoMissingCredentialsError } from '../../error';\nimport { GSSAPICanonicalizationValue } from './gssapi';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './providers';\n\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello?: Document): AuthMechanism {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(AuthMechanism.MONGODB_SCRAM_SHA256)\n        ? AuthMechanism.MONGODB_SCRAM_SHA256\n        : AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (hello.maxWireVersion >= 3) {\n      return AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n\n  // Default for wireprotocol < 3\n  return AuthMechanism.MONGODB_CR;\n}\n\n/** @public */\nexport interface AuthMechanismProperties extends Document {\n  SERVICE_HOST?: string;\n  SERVICE_NAME?: string;\n  SERVICE_REALM?: string;\n  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\n  AWS_SESSION_TOKEN?: string;\n}\n\n/** @public */\nexport interface MongoCredentialsOptions {\n  username: string;\n  password: string;\n  source: string;\n  db?: string;\n  mechanism?: AuthMechanism;\n  mechanismProperties: AuthMechanismProperties;\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nexport class MongoCredentials {\n  /** The username used for authentication */\n  readonly username: string;\n  /** The password used for authentication */\n  readonly password: string;\n  /** The database that the user should authenticate against */\n  readonly source: string;\n  /** The method used to authenticate */\n  readonly mechanism: AuthMechanism;\n  /** Special properties used by some types of auth mechanisms */\n  readonly mechanismProperties: AuthMechanismProperties;\n\n  constructor(options: MongoCredentialsOptions) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (\n        this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n        process.env.AWS_SESSION_TOKEN != null\n      ) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other: MongoCredentials): boolean {\n    return (\n      this.mechanism === other.mechanism &&\n      this.username === other.username &&\n      this.password === other.password &&\n      this.source === other.source\n    );\n  }\n\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param hello - A hello response from the server\n   */\n  resolveAuthMechanism(hello?: Document): MongoCredentials {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n  validate(): void {\n    if (\n      (this.mechanism === AuthMechanism.MONGODB_GSSAPI ||\n        this.mechanism === AuthMechanism.MONGODB_CR ||\n        this.mechanism === AuthMechanism.MONGODB_PLAIN ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA1 ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA256) &&\n      !this.username\n    ) {\n      throw new MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n\n    if (AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new MongoAPIError(\n          `Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`\n        );\n      }\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n\n    const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n    if (!Object.values(GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n    }\n  }\n\n  static merge(\n    creds: MongoCredentials | undefined,\n    options: Partial<MongoCredentialsOptions>\n  ): MongoCredentials {\n    return new MongoCredentials({\n      username: options.username ?? creds?.username ?? '',\n      password: options.password ?? creds?.password ?? '',\n      mechanism: options.mechanism ?? creds?.mechanism ?? AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}