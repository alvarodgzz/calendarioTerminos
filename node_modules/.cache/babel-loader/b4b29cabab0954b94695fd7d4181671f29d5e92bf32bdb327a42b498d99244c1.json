{"ast":null,"code":"\"use strict\";\n\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst metrics_1 = require(\"./cmap/metrics\");\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst transactions_1 = require(\"./transactions\");\nconst utils_1 = require(\"./utils\");\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(client, sessionPool, options, clientOptions) {\n    super();\n    /** @internal */\n    this[_a] = false;\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n    options = options ?? {};\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n      if (options.causalConsistency === true) {\n        throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n      }\n    }\n    this.client = client;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this.explicit = !!options.explicit;\n    this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n    this[kTxnNumberIncrement] = 0;\n    const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n    this.supports = {\n      // if we can enable causal consistency, do so by default\n      causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n    };\n    this.clusterTime = options.initialClusterTime;\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new transactions_1.Transaction();\n  }\n  /** The server id associated with this session */\n  get id() {\n    return this[kServerSession]?.id;\n  }\n  get serverSession() {\n    let serverSession = this[kServerSession];\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n      if (this.hasEnded) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n      serverSession = this.sessionPool.acquire();\n      this[kServerSession] = serverSession;\n    }\n    return serverSession;\n  }\n  /** Whether or not this session is configured for snapshot reads */\n  get snapshotEnabled() {\n    return this[kSnapshotEnabled];\n  }\n  get loadBalanced() {\n    return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /** @internal */\n  get pinnedConnection() {\n    return this[kPinnedConnection];\n  }\n  /** @internal */\n  pin(conn) {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n    this[kPinnedConnection] = conn;\n    conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n  }\n  /** @internal */\n  unpin(options) {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n    this.transaction.unpinServer();\n  }\n  get isPinned() {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n  /**\n   * Ends this session on the server\n   *\n   * @param options - Optional settings. Currently reserved for future use\n   */\n  async endSession(options) {\n    try {\n      if (this.inTransaction()) {\n        await this.abortTransaction();\n      }\n      if (!this.hasEnded) {\n        const serverSession = this[kServerSession];\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession);\n          // Make sure a new serverSession never makes it onto this ClientSession\n          Object.defineProperty(this, kServerSession, {\n            value: ServerSession.clone(serverSession),\n            writable: false\n          });\n        }\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n      }\n    } catch {\n      // spec indicates that we should ignore all errors for `endSessions`\n    } finally {\n      maybeClearPinnedConnection(this, {\n        force: true,\n        ...options\n      });\n    }\n  }\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime) {\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n    }\n    if (!clusterTime.signature || clusterTime.signature.hash?._bsontype !== 'Binary' || typeof clusterTime.signature.keyId !== 'number' && clusterTime.signature.keyId?._bsontype !== 'Long' // apparently we decode the key to number?\n    ) {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n    }\n    (0, common_1._advanceClusterTime)(this, clusterTime);\n  }\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n    return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n  }\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n  incrementTransactionNumber() {\n    this[kTxnNumberIncrement] += 1;\n  }\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options) {\n    if (this[kSnapshotEnabled]) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n    }\n    if (this.inTransaction()) {\n      throw new error_1.MongoTransactionError('Transaction already in progress');\n    }\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n    const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n    if ((0, shared_1.isSharded)(this.client.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    }\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new transactions_1.Transaction({\n      readConcern: options?.readConcern ?? this.defaultTransactionOptions.readConcern ?? this.clientOptions?.readConcern,\n      writeConcern: options?.writeConcern ?? this.defaultTransactionOptions.writeConcern ?? this.clientOptions?.writeConcern,\n      readPreference: options?.readPreference ?? this.defaultTransactionOptions.readPreference ?? this.clientOptions?.readPreference,\n      maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n    });\n    this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n  }\n  /**\n   * Commits the currently active transaction in this session.\n   */\n  async commitTransaction() {\n    return endTransactionAsync(this, 'commitTransaction');\n  }\n  /**\n   * Aborts the currently active transaction in this session.\n   */\n  async abortTransaction() {\n    return endTransactionAsync(this, 'abortTransaction');\n  }\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON() {\n    throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n  /**\n   * Runs a provided callback within a transaction, retrying either the commitTransaction operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n   * Any callbacks that do not return a Promise will result in undefined behavior.\n   *\n   * @remarks\n   * This function:\n   * - Will return the command response from the final commitTransaction if every operation is successful (can be used as a truthy object)\n   * - Will return `undefined` if the transaction is explicitly aborted with `await session.abortTransaction()`\n   * - Will throw if one of the operations throws or `throw` statement is used inside the `withTransaction` callback\n   *\n   * Checkout a descriptive example here:\n   * @see https://www.mongodb.com/developer/quickstart/node-transactions/\n   *\n   * @param fn - callback to run within a transaction\n   * @param options - optional settings for the transaction\n   * @returns A raw command response or undefined\n   */\n  async withTransaction(fn, options) {\n    const startTime = (0, utils_1.now)();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\nfunction hasNotTimedOut(startTime, max) {\n  return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n  const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n  return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\nfunction maybeClearPinnedConnection(session, options) {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options?.error;\n  if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n    return;\n  }\n  const topology = session.client.topology;\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn && topology != null) {\n    const servers = Array.from(topology.s.servers.values());\n    const loadBalancer = servers[0];\n    if (options?.error == null || options?.force) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n      if (options?.forceClear) {\n        loadBalancer.s.pool.clear({\n          serviceId: conn.serviceId\n        });\n      }\n    }\n    session[kPinnedConnection] = undefined;\n  }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null || !(err instanceof error_1.MongoServerError)) {\n    return false;\n  }\n  return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n    throw err;\n  });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([transactions_1.TxnState.NO_TRANSACTION, transactions_1.TxnState.TRANSACTION_COMMITTED, transactions_1.TxnState.TRANSACTION_ABORTED]);\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options) {\n  session.startTransaction(options);\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n  if (!(0, utils_1.isPromiseLike)(promise)) {\n    session.abortTransaction().catch(() => null);\n    throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n  }\n  return promise.then(() => {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }, err => {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof error_1.MongoError && err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n      if (isMaxTimeMSExpiredError(err)) {\n        err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n      }\n      throw err;\n    }\n    if (session.inTransaction()) {\n      return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n    }\n    return maybeRetryOrThrow(err);\n  });\n}\nconst endTransactionAsync = (0, util_1.promisify)(endTransaction);\nfunction endTransaction(session, commandName, callback) {\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n  if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n    callback(new error_1.MongoTransactionError('No transaction started'));\n    return;\n  }\n  if (commandName === 'commitTransaction') {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  }\n  // construct and send the command\n  const command = {\n    [commandName]: 1\n  };\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = {\n      w: session.clientOptions.writeConcern.w\n    };\n  }\n  if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern\n    });\n  }\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n  function commandHandler(error, result) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, {\n          force: false\n        });\n      }\n      // The spec indicates that we should ignore all errors on `abortTransaction`\n      return callback();\n    }\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n    if (error instanceof error_1.MongoError) {\n      if (error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError) || error instanceof error_1.MongoWriteConcernError || isMaxTimeMSExpiredError(error)) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n          // per txns spec, must unpin session in this case\n          session.unpin({\n            error\n          });\n        }\n      } else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({\n          error\n        });\n      }\n    }\n    callback(error, result);\n  }\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n  // send the command\n  (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(undefined, command, {\n    session,\n    readPreference: read_preference_1.ReadPreference.primary,\n    bypassPinningCheck: true\n  }), (error, result) => {\n    if (command.abortTransaction) {\n      // always unpin on abort regardless of command outcome\n      session.unpin();\n    }\n    if (error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.unpin({\n          force: true\n        });\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n      return (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(undefined, command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n      }), commandHandler);\n    }\n    commandHandler(error, result);\n  });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n  /** @internal */\n  constructor() {\n    this.id = {\n      id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = (0, utils_1.now)();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n  /**\n   * @internal\n   * Cloning meant to keep a readable reference to the server session data\n   * after ClientSession has ended\n   */\n  static clone(serverSession) {\n    const arrayBuffer = new ArrayBuffer(16);\n    const idBytes = Buffer.from(arrayBuffer);\n    idBytes.set(serverSession.id.id.buffer);\n    const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n    // Manual prototype construction to avoid modifying the constructor of this class\n    return Object.setPrototypeOf({\n      id: {\n        id\n      },\n      lastUse: serverSession.lastUse,\n      txnNumber: serverSession.txnNumber,\n      isDirty: serverSession.isDirty\n    }, ServerSession.prototype);\n  }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n  constructor(client) {\n    if (client == null) {\n      throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n    this.client = client;\n    this.sessions = new utils_1.List();\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire() {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n    let session = null;\n    // Try to obtain from session pool\n    while (this.sessions.length > 0) {\n      const potentialSession = this.sessions.shift();\n      if (potentialSession != null && (!!this.client.topology?.loadBalanced || !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n        session = potentialSession;\n        break;\n      }\n    }\n    // If nothing valid came from the pool make a new one\n    if (session == null) {\n      session = new ServerSession();\n    }\n    return session;\n  }\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session) {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n    if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n    this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n  if (session.hasEnded) {\n    return new error_1.MongoExpiredSessionError();\n  }\n  // May acquire serverSession here\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new error_1.MongoRuntimeError('Unable to acquire server session');\n  }\n  if (options.writeConcern?.w === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = (0, utils_1.now)();\n  command.lsid = serverSession.id;\n  const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n  }\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n      session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n    }\n    if (session.supports.causalConsistency && session.operationTime && (0, utils_1.commandSupportsReadConcern)(command, options)) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || {\n        level: read_concern_1.ReadConcernLevel.snapshot\n      };\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, {\n          atClusterTime: session[kSnapshotTime]\n        });\n      }\n    }\n    return;\n  }\n  // now attempt to apply transaction-specific sessions data\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n  if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n  return;\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n  }\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n  if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse;","map":{"version":3,"mappings":"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","names":["minWireVersionForShardedTransactions","kServerSession","Symbol","kSnapshotTime","kSnapshotEnabled","kPinnedConnection","kTxnNumberIncrement","ClientSession","mongo_types_1","constructor","client","sessionPool","options","clientOptions","error_1","ServerSessionPool","snapshot","causalConsistency","hasEnded","explicit","acquire","defaultCausalConsistencyValue","supports","clusterTime","initialClusterTime","operationTime","undefined","owner","defaultTransactionOptions","Object","assign","transaction","transactions_1","id","serverSession","snapshotEnabled","loadBalanced","topology","description","type","common_1","LoadBalanced","pinnedConnection","pin","conn","TypeError","emit","constants_1","inTransaction","metrics_1","TXN","CURSOR","unpin","maybeClearPinnedConnection","unpinServer","isPinned","endSession","abortTransaction","release","defineProperty","value","ServerSession","clone","writable","force","advanceOperationTime","greaterThan","advanceClusterTime","_bsontype","signature","hash","keyId","equals","session","utils_1","buffer","incrementTransactionNumber","isActive","startTransaction","isCommitted","topologyMaxWireVersion","readConcern","writeConcern","readPreference","maxCommitTimeMS","transition","STARTING_TRANSACTION","commitTransaction","endTransactionAsync","toBSON","withTransaction","fn","startTime","attemptTransaction","exports","MAX_WITH_TRANSACTION_TIMEOUT","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","hasNotTimedOut","max","isUnknownTransactionCommitResult","err","isNonDeterministicWriteConcernError","codeName","has","isMaxTimeMSExpiredError","code","UnsatisfiableWriteConcern","UnknownReplWriteConcern","error","hasErrorLabel","TransientTransactionError","servers","Array","from","s","values","loadBalancer","pool","checkIn","state","NO_TRANSACTION","forceClear","clear","serviceId","MaxTimeMSExpired","writeConcernError","attemptTransactionCommit","catch","UnknownTransactionCommitResult","USER_EXPLICIT_TXN_END_STATES","TRANSACTION_COMMITTED","TRANSACTION_ABORTED","userExplicitlyEndedTransaction","promise","Promise","reject","then","maybeRetryOrThrow","addErrorLabel","endTransaction","commandName","callback","txnState","TRANSACTION_COMMITTED_EMPTY","command","w","wtimeout","maxTimeMS","commandHandler","result","RetryableWriteError","recoveryToken","run_command_1","read_preference_1","primary","bypassPinningCheck","bson_1","SUBTYPE_UUID","lastUse","txnNumber","isDirty","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","Math","round","arrayBuffer","ArrayBuffer","idBytes","Buffer","set","sub_type","setPrototypeOf","prototype","sessions","logicalSessionTimeoutMinutes","length","potentialSession","shift","unshift","prune","applySession","lsid","inTxnOrTxnCommand","isRetryableWrite","willRetryWrite","fromNumber","afterClusterTime","level","read_concern_1","atClusterTime","autocommit","TRANSACTION_IN_PROGRESS","updateSessionFromResponse","document","$clusterTime","_recoveryToken","cursor"],"sources":["/Users/alvarodgzz/Documents/calendarioAnae/app-calendario/node_modules/mongodb/src/sessions.ts"],"sourcesContent":["import { promisify } from 'util';\n\nimport { Binary, Document, Long, Timestamp } from './bson';\nimport type { CommandOptions, Connection } from './cmap/connection';\nimport { ConnectionPoolMetrics } from './cmap/metrics';\nimport { isSharded } from './cmap/wire_protocol/shared';\nimport { PINNED, UNPINNED } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport {\n  AnyError,\n  MongoAPIError,\n  MongoCompatibilityError,\n  MONGODB_ERROR_CODES,\n  MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoExpiredSessionError,\n  MongoInvalidArgumentError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoTransactionError,\n  MongoWriteConcernError\n} from './error';\nimport type { MongoClient, MongoOptions } from './mongo_client';\nimport { TypedEventEmitter } from './mongo_types';\nimport { executeOperation } from './operations/execute_operation';\nimport { RunAdminCommandOperation } from './operations/run_command';\nimport { ReadConcernLevel } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { _advanceClusterTime, ClusterTime, TopologyType } from './sdam/common';\nimport { isTransactionCommand, Transaction, TransactionOptions, TxnState } from './transactions';\nimport {\n  ByteUtils,\n  calculateDurationInMs,\n  Callback,\n  commandSupportsReadConcern,\n  isPromiseLike,\n  List,\n  maxWireVersion,\n  now,\n  uuidV4\n} from './utils';\n\nconst minWireVersionForShardedTransactions = 8;\n\n/** @public */\nexport interface ClientSessionOptions {\n  /** Whether causal consistency should be enabled on this session */\n  causalConsistency?: boolean;\n  /** Whether all read operations should be read from the same snapshot for this session (NOTE: not compatible with `causalConsistency=true`) */\n  snapshot?: boolean;\n  /** The default TransactionOptions to use for transactions started on this session. */\n  defaultTransactionOptions?: TransactionOptions;\n\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  /** @internal */\n  explicit?: boolean;\n  /** @internal */\n  initialClusterTime?: ClusterTime;\n}\n\n/** @public */\nexport type WithTransactionCallback<T = void> = (session: ClientSession) => Promise<T>;\n\n/** @public */\nexport type ClientSessionEvents = {\n  ended(session: ClientSession): void;\n};\n\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n\n/** @public */\nexport interface EndSessionOptions {\n  /**\n   * An optional error which caused the call to end this session\n   * @internal\n   */\n  error?: AnyError;\n  force?: boolean;\n  forceClear?: boolean;\n}\n\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nexport class ClientSession extends TypedEventEmitter<ClientSessionEvents> {\n  /** @internal */\n  client: MongoClient;\n  /** @internal */\n  sessionPool: ServerSessionPool;\n  hasEnded: boolean;\n  clientOptions?: MongoOptions;\n  supports: { causalConsistency: boolean };\n  clusterTime?: ClusterTime;\n  operationTime?: Timestamp;\n  explicit: boolean;\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  defaultTransactionOptions: TransactionOptions;\n  transaction: Transaction;\n  /** @internal */\n  [kServerSession]: ServerSession | null;\n  /** @internal */\n  [kSnapshotTime]?: Timestamp;\n  /** @internal */\n  [kSnapshotEnabled] = false;\n  /** @internal */\n  [kPinnedConnection]?: Connection;\n  /** @internal */\n  [kTxnNumberIncrement]: number;\n\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(\n    client: MongoClient,\n    sessionPool: ServerSessionPool,\n    options: ClientSessionOptions,\n    clientOptions?: MongoOptions\n  ) {\n    super();\n\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options ?? {};\n\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n      if (options.causalConsistency === true) {\n        throw new MongoInvalidArgumentError(\n          'Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive'\n        );\n      }\n    }\n\n    this.client = client;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n\n    this.explicit = !!options.explicit;\n    this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n    this[kTxnNumberIncrement] = 0;\n\n    const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n    this.supports = {\n      // if we can enable causal consistency, do so by default\n      causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n\n  /** The server id associated with this session */\n  get id(): ServerSessionId | undefined {\n    return this[kServerSession]?.id;\n  }\n\n  get serverSession(): ServerSession {\n    let serverSession = this[kServerSession];\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n      if (this.hasEnded) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n      serverSession = this.sessionPool.acquire();\n      this[kServerSession] = serverSession;\n    }\n    return serverSession;\n  }\n\n  /** Whether or not this session is configured for snapshot reads */\n  get snapshotEnabled(): boolean {\n    return this[kSnapshotEnabled];\n  }\n\n  get loadBalanced(): boolean {\n    return this.client.topology?.description.type === TopologyType.LoadBalanced;\n  }\n\n  /** @internal */\n  get pinnedConnection(): Connection | undefined {\n    return this[kPinnedConnection];\n  }\n\n  /** @internal */\n  pin(conn: Connection): void {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n\n    this[kPinnedConnection] = conn;\n    conn.emit(\n      PINNED,\n      this.inTransaction() ? ConnectionPoolMetrics.TXN : ConnectionPoolMetrics.CURSOR\n    );\n  }\n\n  /** @internal */\n  unpin(options?: { force?: boolean; forceClear?: boolean; error?: AnyError }): void {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n\n    this.transaction.unpinServer();\n  }\n\n  get isPinned(): boolean {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n\n  /**\n   * Ends this session on the server\n   *\n   * @param options - Optional settings. Currently reserved for future use\n   */\n  async endSession(options?: EndSessionOptions): Promise<void> {\n    try {\n      if (this.inTransaction()) {\n        await this.abortTransaction();\n      }\n      if (!this.hasEnded) {\n        const serverSession = this[kServerSession];\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession);\n          // Make sure a new serverSession never makes it onto this ClientSession\n          Object.defineProperty(this, kServerSession, {\n            value: ServerSession.clone(serverSession),\n            writable: false\n          });\n        }\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n      }\n    } catch {\n      // spec indicates that we should ignore all errors for `endSessions`\n    } finally {\n      maybeClearPinnedConnection(this, { force: true, ...options });\n    }\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime: Timestamp): void {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime: ClusterTime): void {\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new MongoInvalidArgumentError(\n        'input cluster time \"clusterTime\" property must be a valid BSON Timestamp'\n      );\n    }\n    if (\n      !clusterTime.signature ||\n      clusterTime.signature.hash?._bsontype !== 'Binary' ||\n      (typeof clusterTime.signature.keyId !== 'number' &&\n        clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n    ) {\n      throw new MongoInvalidArgumentError(\n        'input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId'\n      );\n    }\n\n    _advanceClusterTime(this, clusterTime);\n  }\n\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session: ClientSession): boolean {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n\n    return ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n  }\n\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n  incrementTransactionNumber(): void {\n    this[kTxnNumberIncrement] += 1;\n  }\n\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction(): boolean {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options?: TransactionOptions): void {\n    if (this[kSnapshotEnabled]) {\n      throw new MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n    }\n\n    if (this.inTransaction()) {\n      throw new MongoTransactionError('Transaction already in progress');\n    }\n\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.client.topology);\n    if (\n      isSharded(this.client.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoCompatibilityError(\n        'Transactions are not supported on sharded clusters in MongoDB < 4.2.'\n      );\n    }\n\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new Transaction({\n      readConcern:\n        options?.readConcern ??\n        this.defaultTransactionOptions.readConcern ??\n        this.clientOptions?.readConcern,\n      writeConcern:\n        options?.writeConcern ??\n        this.defaultTransactionOptions.writeConcern ??\n        this.clientOptions?.writeConcern,\n      readPreference:\n        options?.readPreference ??\n        this.defaultTransactionOptions.readPreference ??\n        this.clientOptions?.readPreference,\n      maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n    });\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   */\n  async commitTransaction(): Promise<Document> {\n    return endTransactionAsync(this, 'commitTransaction');\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   */\n  async abortTransaction(): Promise<Document> {\n    return endTransactionAsync(this, 'abortTransaction');\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON(): never {\n    throw new MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * Runs a provided callback within a transaction, retrying either the commitTransaction operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n   * Any callbacks that do not return a Promise will result in undefined behavior.\n   *\n   * @remarks\n   * This function:\n   * - Will return the command response from the final commitTransaction if every operation is successful (can be used as a truthy object)\n   * - Will return `undefined` if the transaction is explicitly aborted with `await session.abortTransaction()`\n   * - Will throw if one of the operations throws or `throw` statement is used inside the `withTransaction` callback\n   *\n   * Checkout a descriptive example here:\n   * @see https://www.mongodb.com/developer/quickstart/node-transactions/\n   *\n   * @param fn - callback to run within a transaction\n   * @param options - optional settings for the transaction\n   * @returns A raw command response or undefined\n   */\n  async withTransaction<T = void>(\n    fn: WithTransactionCallback<T>,\n    options?: TransactionOptions\n  ): Promise<Document | undefined> {\n    const startTime = now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction hasNotTimedOut(startTime: number, max: number) {\n  return calculateDurationInMs(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err: MongoError) {\n  const isNonDeterministicWriteConcernError =\n    err instanceof MongoServerError &&\n    err.codeName &&\n    NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!isNonDeterministicWriteConcernError &&\n      err.code !== MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n      err.code !== MONGODB_ERROR_CODES.UnknownReplWriteConcern)\n  );\n}\n\nexport function maybeClearPinnedConnection(\n  session: ClientSession,\n  options?: EndSessionOptions\n): void {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options?.error;\n\n  if (\n    session.inTransaction() &&\n    error &&\n    error instanceof MongoError &&\n    error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n  ) {\n    return;\n  }\n\n  const topology = session.client.topology;\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn && topology != null) {\n    const servers = Array.from(topology.s.servers.values());\n    const loadBalancer = servers[0];\n\n    if (options?.error == null || options?.force) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(\n        UNPINNED,\n        session.transaction.state !== TxnState.NO_TRANSACTION\n          ? ConnectionPoolMetrics.TXN\n          : ConnectionPoolMetrics.CURSOR\n      );\n\n      if (options?.forceClear) {\n        loadBalancer.s.pool.clear({ serviceId: conn.serviceId });\n      }\n    }\n\n    session[kPinnedConnection] = undefined;\n  }\n}\n\nfunction isMaxTimeMSExpiredError(err: MongoError) {\n  if (err == null || !(err instanceof MongoServerError)) {\n    return false;\n  }\n\n  return (\n    err.code === MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n    (err.writeConcernError && err.writeConcernError.code === MONGODB_ERROR_CODES.MaxTimeMSExpired)\n  );\n}\n\nfunction attemptTransactionCommit<T>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<T>,\n  options?: TransactionOptions\n): Promise<T> {\n  return session.commitTransaction().catch((err: MongoError) => {\n    if (\n      err instanceof MongoError &&\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n      !isMaxTimeMSExpiredError(err)\n    ) {\n      if (err.hasErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel(MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set<TxnState>([\n  TxnState.NO_TRANSACTION,\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_ABORTED\n]);\n\nfunction userExplicitlyEndedTransaction(session: ClientSession) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction<TSchema>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<TSchema>,\n  options?: TransactionOptions\n): Promise<any> {\n  session.startTransaction(options);\n\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction().catch(() => null);\n    throw new MongoInvalidArgumentError(\n      'Function provided to `withTransaction` must return a Promise'\n    );\n  }\n\n  return promise.then(\n    () => {\n      if (userExplicitlyEndedTransaction(session)) {\n        return;\n      }\n\n      return attemptTransactionCommit(session, startTime, fn, options);\n    },\n    err => {\n      function maybeRetryOrThrow(err: MongoError): Promise<any> {\n        if (\n          err instanceof MongoError &&\n          err.hasErrorLabel(MongoErrorLabel.TransientTransactionError) &&\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\n        ) {\n          return attemptTransaction(session, startTime, fn, options);\n        }\n\n        if (isMaxTimeMSExpiredError(err)) {\n          err.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n        }\n\n        throw err;\n      }\n\n      if (session.inTransaction()) {\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n      }\n\n      return maybeRetryOrThrow(err);\n    }\n  );\n}\n\nconst endTransactionAsync = promisify(\n  endTransaction as (\n    session: ClientSession,\n    commandName: 'abortTransaction' | 'commitTransaction',\n    callback: (error: Error, result: Document) => void\n  ) => void\n);\n\nfunction endTransaction(\n  session: ClientSession,\n  commandName: 'abortTransaction' | 'commitTransaction',\n  callback: Callback<Document>\n) {\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoTransactionError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (\n      txnState === TxnState.STARTING_TRANSACTION ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(\n        new MongoTransactionError('Cannot call commitTransaction after calling abortTransaction')\n      );\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (\n      txnState === TxnState.TRANSACTION_COMMITTED ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      callback(\n        new MongoTransactionError('Cannot call abortTransaction after calling commitTransaction')\n      );\n      return;\n    }\n  }\n\n  // construct and send the command\n  const command: Document = { [commandName]: 1 };\n\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = { w: session.clientOptions.writeConcern.w };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, { writeConcern });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n  }\n\n  function commandHandler(error?: Error, result?: Document) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, { force: false });\n      }\n\n      // The spec indicates that we should ignore all errors on `abortTransaction`\n      return callback();\n    }\n\n    session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n    if (error instanceof MongoError) {\n      if (\n        error.hasErrorLabel(MongoErrorLabel.RetryableWriteError) ||\n        error instanceof MongoWriteConcernError ||\n        isMaxTimeMSExpiredError(error)\n      ) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n\n          // per txns spec, must unpin session in this case\n          session.unpin({ error });\n        }\n      } else if (error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({ error });\n      }\n    }\n\n    callback(error, result);\n  }\n\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n\n  // send the command\n  executeOperation(\n    session.client,\n    new RunAdminCommandOperation(undefined, command, {\n      session,\n      readPreference: ReadPreference.primary,\n      bypassPinningCheck: true\n    }),\n    (error, result) => {\n      if (command.abortTransaction) {\n        // always unpin on abort regardless of command outcome\n        session.unpin();\n      }\n\n      if (error instanceof MongoError && error.hasErrorLabel(MongoErrorLabel.RetryableWriteError)) {\n        // SPEC-1185: apply majority write concern when retrying commitTransaction\n        if (command.commitTransaction) {\n          // per txns spec, must unpin session in this case\n          session.unpin({ force: true });\n\n          command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n            w: 'majority'\n          });\n        }\n\n        return executeOperation(\n          session.client,\n          new RunAdminCommandOperation(undefined, command, {\n            session,\n            readPreference: ReadPreference.primary,\n            bypassPinningCheck: true\n          }),\n          commandHandler\n        );\n      }\n\n      commandHandler(error, result);\n    }\n  );\n}\n\n/** @public */\nexport type ServerSessionId = { id: Binary };\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nexport class ServerSession {\n  id: ServerSessionId;\n  lastUse: number;\n  txnNumber: number;\n  isDirty: boolean;\n\n  /** @internal */\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes: number): boolean {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      ((calculateDurationInMs(this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n\n  /**\n   * @internal\n   * Cloning meant to keep a readable reference to the server session data\n   * after ClientSession has ended\n   */\n  static clone(serverSession: ServerSession): Readonly<ServerSession> {\n    const arrayBuffer = new ArrayBuffer(16);\n    const idBytes = Buffer.from(arrayBuffer);\n    idBytes.set(serverSession.id.id.buffer);\n\n    const id = new Binary(idBytes, serverSession.id.id.sub_type);\n\n    // Manual prototype construction to avoid modifying the constructor of this class\n    return Object.setPrototypeOf(\n      {\n        id: { id },\n        lastUse: serverSession.lastUse,\n        txnNumber: serverSession.txnNumber,\n        isDirty: serverSession.isDirty\n      },\n      ServerSession.prototype\n    );\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nexport class ServerSessionPool {\n  client: MongoClient;\n  sessions: List<ServerSession>;\n\n  constructor(client: MongoClient) {\n    if (client == null) {\n      throw new MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n\n    this.client = client;\n    this.sessions = new List<ServerSession>();\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire(): ServerSession {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n\n    let session: ServerSession | null = null;\n\n    // Try to obtain from session pool\n    while (this.sessions.length > 0) {\n      const potentialSession = this.sessions.shift();\n      if (\n        potentialSession != null &&\n        (!!this.client.topology?.loadBalanced ||\n          !potentialSession.hasTimedOut(sessionTimeoutMinutes))\n      ) {\n        session = potentialSession;\n        break;\n      }\n    }\n\n    // If nothing valid came from the pool make a new one\n    if (session == null) {\n      session = new ServerSession();\n    }\n\n    return session;\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session: ServerSession): void {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n\n    if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n\n    this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nexport function applySession(\n  session: ClientSession,\n  command: Document,\n  options: CommandOptions\n): MongoDriverError | undefined {\n  if (session.hasEnded) {\n    return new MongoExpiredSessionError();\n  }\n\n  // May acquire serverSession here\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new MongoRuntimeError('Unable to acquire server session');\n  }\n\n  if (options.writeConcern?.w === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = now();\n  command.lsid = serverSession.id;\n\n  const inTxnOrTxnCommand = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    command.txnNumber = Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    if (\n      session.supports.causalConsistency &&\n      session.operationTime &&\n      commandSupportsReadConcern(command, options)\n    ) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || { level: ReadConcernLevel.snapshot };\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n      }\n    }\n\n    return;\n  }\n\n  // now attempt to apply transaction-specific sessions data\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n  return;\n}\n\nexport function updateSessionFromResponse(session: ClientSession, document: Document): void {\n  if (document.$clusterTime) {\n    _advanceClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}