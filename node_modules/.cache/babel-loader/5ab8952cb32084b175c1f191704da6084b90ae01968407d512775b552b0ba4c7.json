{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = require(\"util\");\nconst zlib = require(\"zlib\");\nconst constants_1 = require(\"../../constants\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\n/** @public */\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n});\nexports.uncompressibleCommands = new Set([constants_1.LEGACY_HELLO_COMMAND, 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n  const zlibOptions = {};\n  switch (options.agreedCompressor) {\n    case 'snappy':\n      if ('kModuleError' in deps_1.Snappy) {\n        throw deps_1.Snappy['kModuleError'];\n      }\n      return deps_1.Snappy.compress(dataToBeCompressed);\n    case 'zstd':\n      if ('kModuleError' in deps_1.ZStandard) {\n        throw deps_1.ZStandard['kModuleError'];\n      }\n      return deps_1.ZStandard.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n    case 'zlib':\n      if (options.zlibCompressionLevel) {\n        zlibOptions.level = options.zlibCompressionLevel;\n      }\n      return zlibDeflate(dataToBeCompressed, zlibOptions);\n    default:\n      throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n  }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n  if (compressorID !== exports.Compressor.snappy && compressorID !== exports.Compressor.zstd && compressorID !== exports.Compressor.zlib && compressorID !== exports.Compressor.none) {\n    throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n  }\n  switch (compressorID) {\n    case exports.Compressor.snappy:\n      if ('kModuleError' in deps_1.Snappy) {\n        throw deps_1.Snappy['kModuleError'];\n      }\n      return deps_1.Snappy.uncompress(compressedData, {\n        asBuffer: true\n      });\n    case exports.Compressor.zstd:\n      if ('kModuleError' in deps_1.ZStandard) {\n        throw deps_1.ZStandard['kModuleError'];\n      }\n      return deps_1.ZStandard.decompress(compressedData);\n    case exports.Compressor.zlib:\n      return zlibInflate(compressedData);\n    default:\n      return compressedData;\n  }\n}\nexports.decompress = decompress;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACaA,kBAAU,GAAGC,MAAM,CAACC,MAAM,CAAC;EACtCC,IAAI,EAAE,CAAC;EACPC,MAAM,EAAE,CAAC;EACTC,IAAI,EAAE,CAAC;EACPC,IAAI,EAAE;CACE,CAAC;AAQEN,8BAAsB,GAAG,IAAIO,GAAG,CAAC,CAC5CC,gCAAoB,EACpB,WAAW,EACX,cAAc,EACd,UAAU,EACV,cAAc,EACd,YAAY,EACZ,YAAY,EACZ,iBAAiB,EACjB,gBAAgB,EAChB,QAAQ,CACT,CAAC;AAEF,MAAMC,sBAAsB,GAAG,CAAC;AAEhC,MAAMC,WAAW,GAAG,oBAAS,EAACL,IAAI,CAACM,OAAO,CAACC,IAAI,CAACP,IAAI,CAAC,CAAC;AACtD,MAAMQ,WAAW,GAAG,oBAAS,EAACR,IAAI,CAACS,OAAO,CAACF,IAAI,CAACP,IAAI,CAAC,CAAC;AAEtD;AACO,eAAeU,QAAQ,CAC5BC,OAA2E,EAC3EC,kBAA0B;EAE1B,MAAMC,WAAW,GAAG,EAAsB;EAC1C,QAAQF,OAAO,CAACG,gBAAgB;IAC9B,KAAK,QAAQ;MACX,IAAI,cAAc,IAAIC,aAAM,EAAE;QAC5B,MAAMA,aAAM,CAAC,cAAc,CAAC;;MAE9B,OAAOA,aAAM,CAACL,QAAQ,CAACE,kBAAkB,CAAC;IAE5C,KAAK,MAAM;MACT,IAAI,cAAc,IAAIG,gBAAS,EAAE;QAC/B,MAAMA,gBAAS,CAAC,cAAc,CAAC;;MAEjC,OAAOA,gBAAS,CAACL,QAAQ,CAACE,kBAAkB,EAAER,sBAAsB,CAAC;IAEvE,KAAK,MAAM;MACT,IAAIO,OAAO,CAACK,oBAAoB,EAAE;QAChCH,WAAW,CAACI,KAAK,GAAGN,OAAO,CAACK,oBAAoB;;MAElD,OAAOR,WAAW,CAACI,kBAAkB,EAAEC,WAAW,CAAC;IAErD;MACE,MAAM,IAAIK,iCAAyB,CACjC,sBAAsBP,OAAO,CAACG,gBAAgB,qBAAqB,CACpE;EAAC;AAER;AA7BAnB;AA+BA;AACO,eAAewB,UAAU,CAACC,YAAoB,EAAEC,cAAsB;EAC3E,IACED,YAAY,KAAKzB,kBAAU,CAACI,MAAM,IAClCqB,YAAY,KAAKzB,kBAAU,CAACM,IAAI,IAChCmB,YAAY,KAAKzB,kBAAU,CAACK,IAAI,IAChCoB,YAAY,KAAKzB,kBAAU,CAACG,IAAI,EAChC;IACA,MAAM,IAAIoB,+BAAuB,CAC/B,2FAA2FE,YAAY,GAAG,CAC3G;;EAGH,QAAQA,YAAY;IAClB,KAAKzB,kBAAU,CAACI,MAAM;MACpB,IAAI,cAAc,IAAIgB,aAAM,EAAE;QAC5B,MAAMA,aAAM,CAAC,cAAc,CAAC;;MAE9B,OAAOA,aAAM,CAACO,UAAU,CAACD,cAAc,EAAE;QAAEE,QAAQ,EAAE;MAAI,CAAE,CAAC;IAE9D,KAAK5B,kBAAU,CAACM,IAAI;MAClB,IAAI,cAAc,IAAIc,gBAAS,EAAE;QAC/B,MAAMA,gBAAS,CAAC,cAAc,CAAC;;MAEjC,OAAOA,gBAAS,CAACI,UAAU,CAACE,cAAc,CAAC;IAE7C,KAAK1B,kBAAU,CAACK,IAAI;MAClB,OAAOK,WAAW,CAACgB,cAAc,CAAC;IAEpC;MACE,OAAOA,cAAc;EAAC;AAE5B;AA/BA1B","names":["exports","Object","freeze","none","snappy","zlib","zstd","Set","constants_1","ZSTD_COMPRESSION_LEVEL","zlibInflate","inflate","bind","zlibDeflate","deflate","compress","options","dataToBeCompressed","zlibOptions","agreedCompressor","deps_1","zlibCompressionLevel","level","error_1","decompress","compressorID","compressedData","uncompress","asBuffer"],"sources":["/Users/alvarodgzz/Documents/calendarioAnae/app-calendario/node_modules/mongodb/src/cmap/wire_protocol/compression.ts"],"sourcesContent":["import { promisify } from 'util';\nimport * as zlib from 'zlib';\n\nimport { LEGACY_HELLO_COMMAND } from '../../constants';\nimport { Snappy, ZStandard } from '../../deps';\nimport { MongoDecompressionError, MongoInvalidArgumentError } from '../../error';\n\n/** @public */\nexport const Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n} as const);\n\n/** @public */\nexport type Compressor = typeof Compressor[CompressorName];\n\n/** @public */\nexport type CompressorName = keyof typeof Compressor;\n\nexport const uncompressibleCommands = new Set([\n  LEGACY_HELLO_COMMAND,\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n]);\n\nconst ZSTD_COMPRESSION_LEVEL = 3;\n\nconst zlibInflate = promisify(zlib.inflate.bind(zlib));\nconst zlibDeflate = promisify(zlib.deflate.bind(zlib));\n\n// Facilitate compressing a message using an agreed compressor\nexport async function compress(\n  options: { zlibCompressionLevel: number; agreedCompressor: CompressorName },\n  dataToBeCompressed: Buffer\n): Promise<Buffer> {\n  const zlibOptions = {} as zlib.ZlibOptions;\n  switch (options.agreedCompressor) {\n    case 'snappy':\n      if ('kModuleError' in Snappy) {\n        throw Snappy['kModuleError'];\n      }\n      return Snappy.compress(dataToBeCompressed);\n\n    case 'zstd':\n      if ('kModuleError' in ZStandard) {\n        throw ZStandard['kModuleError'];\n      }\n      return ZStandard.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n\n    case 'zlib':\n      if (options.zlibCompressionLevel) {\n        zlibOptions.level = options.zlibCompressionLevel;\n      }\n      return zlibDeflate(dataToBeCompressed, zlibOptions);\n\n    default:\n      throw new MongoInvalidArgumentError(\n        `Unknown compressor ${options.agreedCompressor} failed to compress`\n      );\n  }\n}\n\n// Decompress a message using the given compressor\nexport async function decompress(compressorID: number, compressedData: Buffer): Promise<Buffer> {\n  if (\n    compressorID !== Compressor.snappy &&\n    compressorID !== Compressor.zstd &&\n    compressorID !== Compressor.zlib &&\n    compressorID !== Compressor.none\n  ) {\n    throw new MongoDecompressionError(\n      `Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`\n    );\n  }\n\n  switch (compressorID) {\n    case Compressor.snappy:\n      if ('kModuleError' in Snappy) {\n        throw Snappy['kModuleError'];\n      }\n      return Snappy.uncompress(compressedData, { asBuffer: true });\n\n    case Compressor.zstd:\n      if ('kModuleError' in ZStandard) {\n        throw ZStandard['kModuleError'];\n      }\n      return ZStandard.decompress(compressedData);\n\n    case Compressor.zlib:\n      return zlibInflate(compressedData);\n\n    default:\n      return compressedData;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}